#!/usr/bin/env python3

import argparse
import json
import os
import pathlib
import subprocess

from abc import ABC, abstractmethod
from typing import NamedTuple


def _parsed_query(string):
    try:
        path = pathlib.Path(string)
        if path.exists():
            return path.read_text()
    except OSError:
        pass

    return string


class Credentials(NamedTuple):
    database: str
    username: str
    password: str
    server: str


def get_credentials(db, read_only=False):
    if db == 'lesemops':
        item_name = 'lesemops live'
    elif db == 'prototype-adapter':
        item_name = 'prototype-adapter'
        # we only have credentials for read-only here
        args.read_only = True
    elif db == 'storage-service':
        item_name = 'storage-service live'
    else:
        raise SystemExit(f'unknown database: {db}')

    if read_only:
        item_name += ' READ-ONLY'

    op = subprocess.run(['op', 'get', 'item', item_name, '--session', session_token, '--fields', 'username,password,server,database'], capture_output=True)

    if op.returncode != 0:
        raise SystemExit(op.stderr.decode().strip())

    attrs = json.loads(op.stdout)

    return Credentials(
        server=attrs['server'],
        database=attrs['database'],
        username=attrs['username'],
        password=attrs['password'],
    )


class IConnection(ABC):
    def __init__(self, creds):
        self._server = creds.server
        self._database = creds.database
        self._username = creds.username
        self._password = creds.password

    @abstractmethod
    def shell(self):
        pass


class MySQLConnection(IConnection):
    def shell(self):
        mysql_args = [
            '/usr/bin/mysql',
            f'--host={self._server}',
            f'--user={self._username}',
            f'--password={self._password}',
            f'--database={self._database}',
        ]

        subprocess.run(mysql_args)

    def query(self, query):
        mysql_args = [
            '/usr/bin/mysql',
            f'--host={self._server}',
            f'--user={self._username}',
            f'--password={self._password}',
            f'--database={self._database}',
        ]
        subprocess.run(mysql_args, input=query.encode())


class CloudSQLProxyConnection(IConnection):
    def shell(self):
        pass

    def query(self, query):
        raise NotImplementedError


def create_connection(creds):
    if creds.database == 'storage_service':
        return CloudSQLProxyConnection(creds)
    return MySQLConnection(creds)



def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('database', choices=('lesemops', 'prototype-adapter', 'storage-service'))
    parser.add_argument('-ro' ,'--read-only', action='store_true', dest='read_only')
    parser.add_argument('-q' ,'--query', type=_parsed_query, dest='query')

    return parser.parse_args()


def _retrieve_session_token():
        op = subprocess.run(['op', 'signin', 'momox', '--raw'], capture_output=True)
        return op.stdout.decode().strip()


if __name__ == '__main__':
    args = parse_args()

    # FIXME: hardcoded token env var
    session_token = os.environ.get('OP_SESSION_momox', None) or _retrieve_session_token()

    creds = get_credentials(args.database, args.read_only)

    connection = create_connection(creds)

    if args.query:
        connection.query(args.query)
    else:
        connection.shell()
