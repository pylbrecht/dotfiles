#!/usr/bin/env python3

import argparse
import json
import os
import subprocess

from abc import ABC, abstractmethod


class IVault:
    @abstractmethod
    def get(self, key: str) -> dict:
        pass


class OnePasswordVault(IVault):
    def __init__(self):
        # FIXME: hardcoded token env var
        self.session_token = (
            os.environ.get("OP_SESSION_momox", None) or self._retrieve_session_token()
        )

    def _retrieve_session_token(self):
        # FIXME: hardcoded account
        op = subprocess.run(
            ["op", "signin", "--account", "momox", "--raw"], capture_output=True
        )
        return op.stdout.decode().strip()

    def get(self, key: str, fields) -> dict:
        op = subprocess.run(
            [
                "op",
                "--session",
                self.session_token,
                "item",
                "get",
                key,
                "--format",
                "json",
                "--fields",
                ",".join(fields),
            ],
            capture_output=True,
        )

        if op.returncode != 0:
            raise SystemExit(op.stderr.decode().strip())

        payload = json.loads(op.stdout)

        # this relies on the order of fields returned by op being
        # the same as the order of fields we passed via --fields
        return {field: item["value"] for field, item in zip(fields, payload)}


class IConnection(ABC):
    @abstractmethod
    def shell(self):
        pass


class CloudSQLProxyConnection(IConnection):
    def __init__(self, username, password, database, project, instance):
        self._username = username
        self._password = password
        self._database = database
        self._project = project
        self._instance = instance

    def shell(self):
        # this relies on cloud_sql_proxy already running with `-dir=/tmp/cloud_sql_proxy`
        socket = f"/tmp/cloud_sql_proxy/{self._project}/{self._instance}"

        mysql_args = [
            "/usr/bin/mysql",
            f"--socket={socket}",
            f"--user={self._username}",
            f"--password={self._password}",
            f"--database={self._database}",
        ]

        subprocess.run(mysql_args)


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("database", choices=("storage-service"))
    parser.add_argument("-s", "--stage", action="store_true", dest="stage")

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    fields = ["username", "password", "instance", "project", "database"]
    creds = OnePasswordVault().get(args.database, fields)

    connection = CloudSQLProxyConnection(**creds)
    connection.shell()
